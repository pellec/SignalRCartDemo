@model dynamic
@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <title>Welcome!</title>
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
    <link href="~/Content/toastr.min.css" rel="stylesheet" />
    <link href="~/Content/styles.css" rel="stylesheet" />
</head>
<body>
    <div class="container">
        <div class="row">
            <h1>Welcome!</h1>
            <h2>Here we only sell the finest movies ever produced</h2>
        </div>
        <div class="row">
            <div class="col-lg-12" data-bind="visible: cart.items().length > 0">
                <h4>Your shopping cart</h4>
                <table class="table table-bordered" style="background-color: #e5f5f9">
                    <thead>
                        <tr>
                            <td>#</td>
                            <td>Title</td>
                            <td>Quantity</td>
                            <td>Sub total</td>
                        </tr>
                    </thead>
                    <tbody data-bind="foreach: cart.items">
                        <tr>
                            <td><img class="img-rounded" style="width:30px;" data-bind="attr: { src: imageFilePath }" /></td>
                            <td data-bind="text: title"></td>
                            <td data-bind="text: quantity"></td>
                            <td data-bind="currency: subTotal"></td>
                        </tr>
                    </tbody>
                    <tfoot>
                        <tr>
                            <td></td>
                            <td>
                                <button data-bind="click: cart.checkout" class="btn btn-primary">Checkout!</button>
                            </td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12">
                <h4>Currently in stock</h4>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <td>#</td>
                            <td>Title</td>
                            <td>Available</td>
                            <td>Price</td>
                            <td>Selected quantity</td>
                            <td></td>
                        </tr>
                    </thead>
                    <tbody data-bind="foreach: products">
                        <tr>
                            <td><img class="img-rounded" style="width:70px;" data-bind="attr: { src: imageFilePath }" /></td>
                            <td data-bind="text: title"></td>
                            <td data-bind="text: available"></td>
                            <td data-bind="currency: price"></td>
                            <td>
                                <input type="text" class="input-mini" data-bind="value: quantity" />
                            </td>
                            <td>
                                <button data-bind="click: $root.cart.addToCart" class="btn btn-small">Add to cart</button>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <script src="~/Scripts/jquery-2.1.0.min.js"></script>
    <script src="~/Scripts/knockout-3.1.0.js"></script>
    <script src="~/Scripts/toastr.min.js"></script>
    <script src="~/Scripts/jquery.signalR-2.0.3.js"></script>
    <script src="~/signalr/hubs"></script>
    <script src="~/Scripts/knockout.helpers.js"></script>
    <script>

        (function (app) {

            app.ViewModel = function () {
                var products = ko.observableArray([]);
                var cart = new app.Cart();

                var vm = {
                    products: products,
                    cart: cart
                };

                function init() {
                    app.DataService.getProducts(products);
                }

                init();

                return vm;
            };

            app.Cart = function () {
                var self = this;
                self.customerId = ko.observable();
                self.items = ko.observableArray([]);
                self.addToCart = function (item) {
                    if (!item.quantity()) {
                        toastr.warning('There is no selected quantity :(');
                        return;
                    }

                    if (parseInt(item.quantity()) > item.available()) {
                        toastr.warning('The selected quantity is more than there is available :(');
                        return;
                    }

                    self.items.push(new app.CartItem(ko.toJS(item)));
                    item.quantity('');
                };

                self.checkout = function () {
                    var rows = ko.utils.arrayMap(self.items(), function (item) {
                        return {
                            productId: item.id(),
                            quantity: item.quantity(),
                            title: item.title(),
                            price: item.price()
                        };
                    });

                    var order = {
                        rows: rows,
                        customerId: self.customerId()
                    };

                    app.DataService.placeOrder(order).then(function () {
                        self.items([]);
                        toastr.success('Order successfully placed!');
                    })
                    .fail(function () {
                        toastr.error('BOOM!');
                    });
                };

                var cart = {
                    items: self.items,
                    addToCart: self.addToCart,
                    checkout: self.checkout,
                    customerId: self.customerId
                };

                return cart;
            };

            app.CartItem = function (product) {
                var cartitem = mapToObservable(product);

                cartitem.subTotal = ko.computed(function () {
                    return parseInt(cartitem.quantity()) * cartitem.price();
                });

                cartitem.isChanged = ko.observable(false);

                return cartitem;
            };

            app.Product = function (dto) {
                var product = mapToObservable(dto);
                product.quantity = ko.observable();

                return product;
            };

            app.DataService = (function () {

                var placeOrder = function (data) {
                    var options = {
                        url: 'api/order',
                        type: 'POST',
                        contentType: 'application/json',
                        dataType: 'json',
                        data: JSON.stringify(data)
                    };

                    return $.ajax(options);
                };

                var getProducts = function (productsObservable) {
                    return $.getJSON('api/product').then(function (data) {
                        var products = [];
                        $.each(data, function (i, dto) {
                            products.push(app.Product(dto));
                        });

                        productsObservable(products);
                    });
                };

                var dataService = {
                    placeOrder: placeOrder,
                    getProducts: getProducts
                };

                return dataService;
            })();

            jQuery(function ($) {
                var vm = new app.ViewModel(),
                    hub = $.connection.cart;

                ko.applyBindings(vm);

                hub.client.updateProductCount = function (product) {
                    var match = ko.utils.arrayFirst(vm.products(), function (p) {
                        return p.id() === product.id;
                    });

                    toastr.info('Availability changed for product "' + product.title + '" to "' + product.available + '"');
                    match.available(product.available);
                };

                $.connection.hub.start({transport: 'longPolling'}).done(function () {
                    vm.cart.customerId($.connection.hub.id);
                });

            });

        })(window.App = {});

    </script>
</body>
</html>
